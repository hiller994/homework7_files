#Поиск файла
#os - модель для работы с операционной системой
import os.path #по такому то пути сделай мне то
import shutil

'''
print(os.path.abspath(__file__)) #определяем, где находится текущий питоновский файл, т.е. script_os.py
#вместо __file__ можно указать относительный путь, но не факт, что найдет
'''
#(------------------------------------------)
'''
current_file = os.path.abspath(__file__) #можно загнать это в переменную для дальнейшего использования
current_dir = os.path.dirname(current_file) #определяет директорию файла с обрезунием названия самого файла
print(current_dir)
#нахождение директории понадобиться, когда будем работать не на локалке

#пример склеивания путей
tmp_dir = os.path.join(current_dir, "tmp")
#join - унифицирует код. Например на windows, linux, mac OS по разному прописываются пути и join делает так, чтобы путь работал на всех ОС
print(tmp_dir)
'''
#(------------------------------------------)
#для дальнейшего переопределения путей сделам константы. как переменная, только в верхнем регистре

CURRENT_FILE = os.path.abspath(__file__)

CURRENT_DIR = os.path.dirname(CURRENT_FILE)
print(CURRENT_DIR)

TMP_DIR = os.path.join(CURRENT_DIR, "tmp")
print(TMP_DIR) #теперь мы можем указать данную константу вместо абсолютного пути в тесте test_downloads.py

#(------------------------------------------)

#СОЗДАНИЕ ДИРЕКТОРИЙ
'''
os.mkdir('tmp2')
'''

#проверка на существующие директории перед созданием новой
if not os.path.exists('../tmp2'): #если нет с таким именем
    os.mkdir('../tmp2') #тогда создай
    print("Создал")
else:
    print("Не создал(есть дубли)")

#(------------------------------------------)

#Удаление файлов:
#shutil.rmtree(os.path.join(CURRENT_DIR, "tmp2"))